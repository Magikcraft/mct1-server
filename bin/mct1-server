#!/usr/bin/env node

const dockerCLI = require('docker-cli-js')
const checkForUpdate = require('update-check')
const chalk = require('chalk')
const pkg = require('../package')

const DockerOptions = dockerCLI.Options
const Docker = dockerCLI.Docker

const { mct1WorldDir, mct1PluginDir } = require('../lib/util')
const {
    getWorlds,
    getLocalWorldsMetadata,
    mct1WorldsExistLocally,
} = require('../lib/getWorlds')
const { copyPlugin, pluginExists, pluginVersion } = require('../lib/copyPlugin')

const md = require('../package.json')

const header = chalk.green('\nMCT1 Server - by Magikcraft.io\n')
const msgNotRunning = 'MCT1 Server is not running.'
const worldStatus = () =>
    mct1WorldsExistLocally()
        ? `\nWorlds installed at ${mct1WorldDir}.`
        : `\nWorlds not found at ${mct1WorldDir}. Start server to download worlds.`

const pluginStatus = () =>
    pluginExists()
        ? `\nPlugin installed in ${mct1PluginDir}.`
        : `\nPlugin not installed in ${mct1PluginDir}. Start server to install plugin.`

const options = new DockerOptions(
    /* machineName */ null,
    /* currentWorkingDirectory */ __dirname
)
const docker = new Docker(options)

const command = process.argv[2]
const commands = {
    start: {
        description: 'Start the MCT1 server',
        name: 'start',
    },

    stop: {
        description: 'Stop the MCT1 server',
        name: 'stop',
    },

    status: {
        description: 'Get the status of the MCT1 server',
        name: 'status',
    },

    version: {
        description: 'Output version information',
        name: 'version',
    },
}

if (!command || !commands[command]) {
    printHelp()
    exit()
}

processCommand(command)

async function doUpdateCheck() {
    let update = null

    try {
        update = await checkForUpdate(pkg)
    } catch (err) {
        console.error(`Failed to check for updates: ${err}`)
    }

    if (update) {
        console.log(
            chalk.yellow(
                `\nAn updated version is available. The latest version is ${
                    update.latest
                }. Please update!`
            )
        )
        console.log(chalk.blue('\nnpm i -g mct1-server\n'))
    }
    return true
}

function printHelp() {
    console.log(header)
    console.log(`Version ${md.version}`)
    console.log('\nUsage:')
    console.log('mct1-server <command>')
    console.log('\nAvailable commands:')
    Object.keys(commands).forEach(c =>
        console.log(`${c} \t \t ${commands[c].description}`)
    )
}

function processCommand(command) {
    if (command === commands.start.name) {
        startServer()
    }
    if (command === commands.stop.name) {
        stopServer()
    }
    if (command === commands.status.name) {
        getStatus()
    }
    if (command === commands.version.name) {
        printVersions()
    }
}

function printVersions() {
    return Promise.resolve()
        .then(getLocalWorldsMetadata)
        .then(({ version }) => {
            const worldsVersion = version === '0.0.0' ? 'Not found' : version
            const mct1Version = pluginVersion()
            const serverVersion = pkg.version
            console.log(header)

            console.log(`Server version: ${serverVersion}`)
            console.log(`Worlds Version: ${worldsVersion}`)
            console.log(`Plugin version: ${mct1Version}`)
            console.log(`\nWorlds dir: ${mct1WorldDir}`)
            console.log(`Plugin dir: ${mct1PluginDir}`)
            return true
        })
        .then(exit)
}

function getContainerStatus(data) {
    return docker
        .command('inspect mct1')
        .then(data =>
            Object.assign(data.object[0].State, {
                worlds: mct1WorldDir,
                plugin: mct1PluginDir,
            })
        )
        .catch(() => msgNotRunning + worldStatus() + pluginStatus())
}

function getStatus() {
    return Promise.resolve()
        .then(getContainerStatus)
        .then(console.log)
}

function startServer() {
    // Check if server is running
    Promise.resolve()
        .then(getWorldsIfNeeded)
        .then(installPluginIfNeeded)
        .then(getContainerStatus)
        .then(data => {
            if (data.Status === 'running') {
                console.log('Server is already running.')
                exit()
            }
            if (data.Status === 'exited') {
                return removeStoppedInstance()
            }
            if (data.Status === 'paused') {
                return restartPausedContainer()
                    .then(getStatus)
                    .then(exit)
            }
            console.log('Starting MCT1 Server')
        })
        .then(startNewInstance)
}

function restartPausedContainer() {
    console.log('Unpausing MCT1 Server')
    return docker.command('unpause mct1')
}

function getWorldsIfNeeded() {
    return Promise.resolve().then(() => mct1WorldsExistLocally() || getWorlds())
}

function installPluginIfNeeded() {
    Promise.resolve().then(() => pluginExists() || copyPlugin())
}

function startNewInstance() {
    const port = process.argv[3] || 25565

    const mount = (src, dst) =>
        `--mount type=bind,src=${src},dst=/server/${dst}`

    const worlds = mount(mct1WorldDir, 'worlds')
    const plugin = mount(mct1PluginDir, 'scriptcraft-plugins/@magikcraft/mct1')
    docker
        .command(
            `run -d -p ${port}:25565 --name mct1 ${worlds} ${plugin} --restart always magikcraft/scriptcraft`
        )
        .then(() => {
            console.log(`MCT1 Server started on localhost:${port}`)
        })
        .catch(e => {
            console.log('There was an error starting the server!')
            console.log(e)
            console.log(
                `\nTry stopping the server, then starting it again.\n\nIf that doesn't work - check if this issue has been reported at https://github.com/Magikcraft/mct1-server/issues`
            )
        })
}

function stopServer() {
    Promise.resolve()
        .then(getContainerStatus)
        .then(data => {
            if (!data.Status) {
                console.log(msgNotRunning)
                exit()
            }
            if (data.Status === 'exited') {
                return Promise.resolve()
                    .then(removeStoppedInstance)
                    .then(exit)
            }
            console.log('Shutting down server...')
        })
        .then(stopRunningInstance)
        .then(removeStoppedInstance)
}

function exit() {
    return doUpdateCheck().then(process.exit)
}

function stopRunningInstance() {
    return docker.command('stop mct1')
}

function removeStoppedInstance() {
    console.log('Removing stopped container')
    return docker.command('rm mct1')
}
